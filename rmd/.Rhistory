fitVcErrorMatrixTable <- table(fitVcErrorMatrix)
fitVcErrorMatrixTable
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTable)/sum(fitVcErrorMatrixTable))
fitVc$overallFit
# ---
# revised fit by pruning the tree where cp=0.26667
# ---
# eliminate the owner variable
vs2010Revised <- select(vs2010, -owner)
# create the fit
fitVcRevised <- prune(fitVc, cp=0.26667)
# visualization
rpart.plot::prp(
fitVcRevised,
type=1,
extra=101,
box.palette="auto",
branch.lty=3,
varlen=0,
shadow.col="gray",
nn=TRUE,
fallen.leaves=TRUE
)
# error matrix
fitVcErrorMatrixRevised <- data.frame(cat=vs2010Revised$violentcrime_quartile, predict(fitVcRevised, type="class"))
fitVcErrorMatrixTableRevised <- table(fitVcErrorMatrixRevised)
fitVcErrorMatrixTableRevised
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTableRevised)/sum(fitVcErrorMatrixTableRevised))
fitVc$overallFit
# ---
# revised fit by eliminating the owner variable
# ---
# eliminate the owner variable
vs2010Revised <- select(vs2010, -owner)
# create the fit
fitVcRevised <- rpart(
vs2010Revised$violentcrime_quartile ~ .,
data=vs2010Revised,
method="class"
)
# visualization
rpart.plot::prp(
fitVcRevised,
type=1,
extra=101,
box.palette="auto",
branch.lty=3,
varlen=0,
shadow.col="gray",
nn=TRUE,
fallen.leaves=TRUE
)
# error matrix
fitVcErrorMatrixRevised <- data.frame(cat=vs2010Revised$violentcrime_quartile, predict(fitVcRevised, type="class"))
fitVcErrorMatrixTableRevised <- table(fitVcErrorMatrixRevised)
fitVcErrorMatrixTableRevised
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTableRevised)/sum(fitVcErrorMatrixTableRevised))
fitVc$overallFit
# ---
# Test the model using the v15Df data
# ---
# create the data set
vs15Df <- import("VS15-No Parentheses-cleaned.csv")
names(vs15Df)[names(vs15Df) == "csa2010"] <- "community"
# add the extra columns from vs10Df
vs15Df <- vs15Df %>%
left_join (
select (
resourcesDfAll,
community,
all_of (
c("population", "food", "bike", "walk", "fast_food", "liquor", "drugs", "resource_access_index")
)
),
by = "community"
)
# calculate the quartiles for violentcrime
vs15Df <- vs15Df %>% mutate(violentcrime_quartile = ntile(violentcrime, 4))
# create the predictions
vs15Df$predictions <- predict(fitVc, newdata = vs15Df, type = "class")
# create the confusion Matrix
confusionMatrix <- table(vs15Df$violentcrime_quartile, vs15Df$predictions)
# calculate accuracy
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
print(paste("Accuracy:", accuracy))
# ---
# libraries
# ---
pacman::p_load(
rio,
car,
ggplot2,
colorspace,
ggtext,
dplyr,
tidyverse,
flextable,
car,
rpart,
rpart.plot
)
# ---
# reset (clear) the environment and set the working directory and load data
# ---
rm(list=ls())
setwd("C:\\_WORKSPACES\\JohnsHopkinsClasses\\2024-05-DataScienceForPublicPolicy\\module-08\\assignment-05")
# ---
# create the vs10df data frame
# --
# import raw data file for vs10
vs10Df <- import("VS10_CLEANED.csv")
# import bnai data sets
foodDf <- import("Vital Signs Indicator Average Healthy Food Availability Index_2015.xlsx")
bikeDf <- import("Vital Signs Indicator Number of Miles of Bike Lanes_2020.xlsx")
walkDf <- import("Vital Signs Indicator Walk Score_2017.xlsx")
fastFoodDf <- import("Vital Signs Indicator Fast Food Outlet Density (per 1,000 Residents)_2018.xlsx")
liquorDf <- import("Vital Signs Indicator Liquor Outlet Density (per 1,000 Residents)_2015.xlsx")
drugsDf <- import("Vital Signs Indicator Number of Overdose Calls for Service per 1,000 Residents_2018.xlsx")
# rename the Community column to community
names(foodDf)[1] <- "community"
names(bikeDf)[1] <- "community"
names(walkDf)[1] <- "community"
names(fastFoodDf)[1] <- "community"
names(liquorDf)[1] <- "community"
names(drugsDf)[1] <- "community"
# rename the data column to raw_score
names(foodDf)[2] <- "raw_score"
names(bikeDf)[2] <- "raw_score"
names(walkDf)[2] <- "raw_score"
names(fastFoodDf)[2] <- "raw_score"
names(liquorDf)[2] <- "raw_score"
names(drugsDf)[2] <- "raw_score"
# create the data table from the vs10 data frame and rename csa2010 to community
resourcesDf <- vs10Df
names(resourcesDf)[names(resourcesDf) == "csa2010"] <- "community"
# add the raw data columns
resourcesDf <- resourcesDf %>% left_join(foodDf, by=(c("community"))) %>% rename(food_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(bikeDf, by=(c("community"))) %>% rename(bike_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(walkDf, by=(c("community"))) %>% rename(walk_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(fastFoodDf, by=(c("community"))) %>% rename(fast_food_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(liquorDf, by=(c("community"))) %>% rename(liquor_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(drugsDf, by=(c("community"))) %>% rename(drugs_raw_score="raw_score")
# add the percentile columns
resourcesDf$food <- ifelse(resourcesDf$food_raw_score >= median(resourcesDf$food_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$bike <- ifelse(resourcesDf$bike_raw_score >= median(resourcesDf$bike_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$walk <- ifelse(resourcesDf$walk_raw_score >= median(resourcesDf$walk_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$fast_food <- ifelse(resourcesDf$fast_food_raw_score < median(resourcesDf$fast_food_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$liquor <- ifelse(resourcesDf$liquor_raw_score < median(resourcesDf$liquor_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$drugs <- ifelse(resourcesDf$drugs_raw_score < median(resourcesDf$drugs_raw_score, na.rm=TRUE), 1, 0)
# calculate the feature variable resource_access_index
resourcesDf$resource_access_index <- 0 +
(resourcesDf$food == 1) +
(resourcesDf$bike == 1) +
(resourcesDf$walk == 1) +
(resourcesDf$fast_food == 1) +
(resourcesDf$liquor == 1) +
(resourcesDf$drugs == 1)
# add quartiles for violentcrime to vs2010 and remove the original violentcrime variable
resourcesDf <- resourcesDf %>% mutate(violentcrime_quartile = ntile(violentcrime, 4))
resourcesDfAll <- resourcesDf
resourcesDf <- select(
resourcesDf,
-community,
-violentcrime,
-id,
-food_raw_score,
-bike_raw_score,
-walk_raw_score,
-fast_food_raw_score,
-liquor_raw_score,
-drugs_raw_score)
# clean the data set and rename to vs2010
vs2010 <- resourcesDf
# show a summary of the table
skimrTab <- skimr::skim(vs2010)
skimrTab %>%
dplyr::select(-skim_type, -n_missing, -complete_rate) %>%
tibble::rowid_to_column() %>%
flextable::flextable() %>%
autofit() %>%
fit_to_width(14)
# ---
# create the model
# ---
# create the fit
fitVc <- rpart(
vs2010$violentcrime_quartile ~ .,
data=vs2010,
method="class"
)
#visualization
rpart.plot::prp(
fitVc,
type=1,
extra=101,
box.palette="auto",
branch.lty=3,
varlen=0,
shadow.col="gray",
nn=TRUE,
fallen.leaves=TRUE
)
# rules for the tree
summary(fitVc)
# complexity table and plot
printcp(fitVc)
plotcp(fitVc)
# error matrix
fitVcErrorMatrix <- data.frame(cat=vs2010$violentcrime_quartile, predict(fitVc, type="class"))
fitVcErrorMatrixTable <- table(fitVcErrorMatrix)
fitVcErrorMatrixTable
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTable)/sum(fitVcErrorMatrixTable))
fitVc$overallFit
# ---
# revised fit by pruning the tree where cp=0.26667
# ---
# eliminate the owner variable
vs2010Revised <- select(vs2010, -owner)
# create the fit
fitVcRevised <- prune(fitVc, cp=0.26667)
# visualization
rpart.plot::prp(
fitVcRevised,
type=1,
extra=101,
box.palette="auto",
branch.lty=3,
varlen=0,
shadow.col="gray",
nn=TRUE,
fallen.leaves=TRUE
)
# error matrix
fitVcErrorMatrixRevised <- data.frame(cat=vs2010Revised$violentcrime_quartile, predict(fitVcRevised, type="class"))
fitVcErrorMatrixTableRevised <- table(fitVcErrorMatrixRevised)
fitVcErrorMatrixTableRevised
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTableRevised)/sum(fitVcErrorMatrixTableRevised))
fitVc$overallFit
# ---
# revised fit by eliminating the owner variable
# ---
# eliminate the owner variable
vs2010Revised <- select(vs2010, -owner)
# create the fit
fitVcRevised <- rpart(
vs2010Revised$violentcrime_quartile ~ .,
data=vs2010Revised,
method="class"
)
# visualization
rpart.plot::prp(
fitVcRevised,
type=1,
extra=101,
box.palette="auto",
branch.lty=3,
varlen=0,
shadow.col="gray",
nn=TRUE,
fallen.leaves=TRUE
)
# error matrix
fitVcErrorMatrixRevised <- data.frame(cat=vs2010Revised$violentcrime_quartile, predict(fitVcRevised, type="class"))
fitVcErrorMatrixTableRevised <- table(fitVcErrorMatrixRevised)
fitVcErrorMatrixTableRevised
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTableRevised)/sum(fitVcErrorMatrixTableRevised))
fitVc$overallFit
# ---
# Test the model using the v15Df data
# ---
# create the data set
vs15Df <- import("VS15-No Parentheses-cleaned.csv")
names(vs15Df)[names(vs15Df) == "csa2010"] <- "community"
# add the extra columns from vs10Df
vs15Df <- vs15Df %>%
left_join (
select (
resourcesDfAll,
community,
all_of (
c("population", "food", "bike", "walk", "fast_food", "liquor", "drugs", "resource_access_index")
)
),
by = "community"
)
# calculate the quartiles for violentcrime
vs15Df <- vs15Df %>% mutate(violentcrime_quartile = ntile(violentcrime, 4))
# create the predictions
vs15Df$predictions <- predict(fitVc, newdata = vs15Df, type = "class")
# create the confusion Matrix
confusionMatrix <- table(vs15Df$violentcrime_quartile, vs15Df$predictions)
# calculate accuracy
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
print(paste("Accuracy:", accuracy))
# ---
# libraries
# ---
pacman::p_load(
rio,
car,
ggplot2,
colorspace,
ggtext,
dplyr,
tidyverse,
flextable,
car,
rpart,
rpart.plot
)
# ---
# reset (clear) the environment and set the working directory and load data
# ---
rm(list=ls())
setwd("C:\\_WORKSPACES\\JohnsHopkinsClasses\\2024-05-DataScienceForPublicPolicy\\module-08\\assignment-05_RESUBMIT")
# ---
# create the vs10df data frame
# --
# import raw data file for vs10
vs10Df <- import("VS10_CLEANED.csv")
# import bnai data sets
foodDf <- import("Vital Signs Indicator Average Healthy Food Availability Index_2015.xlsx")
bikeDf <- import("Vital Signs Indicator Number of Miles of Bike Lanes_2020.xlsx")
walkDf <- import("Vital Signs Indicator Walk Score_2017.xlsx")
fastFoodDf <- import("Vital Signs Indicator Fast Food Outlet Density (per 1,000 Residents)_2018.xlsx")
liquorDf <- import("Vital Signs Indicator Liquor Outlet Density (per 1,000 Residents)_2015.xlsx")
drugsDf <- import("Vital Signs Indicator Number of Overdose Calls for Service per 1,000 Residents_2018.xlsx")
# rename the Community column to community
names(foodDf)[1] <- "community"
names(bikeDf)[1] <- "community"
names(walkDf)[1] <- "community"
names(fastFoodDf)[1] <- "community"
names(liquorDf)[1] <- "community"
names(drugsDf)[1] <- "community"
# rename the data column to raw_score
names(foodDf)[2] <- "raw_score"
names(bikeDf)[2] <- "raw_score"
names(walkDf)[2] <- "raw_score"
names(fastFoodDf)[2] <- "raw_score"
names(liquorDf)[2] <- "raw_score"
names(drugsDf)[2] <- "raw_score"
# create the data table from the vs10 data frame and rename csa2010 to community
resourcesDf <- vs10Df
names(resourcesDf)[names(resourcesDf) == "csa2010"] <- "community"
# add the raw data columns
resourcesDf <- resourcesDf %>% left_join(foodDf, by=(c("community"))) %>% rename(food_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(bikeDf, by=(c("community"))) %>% rename(bike_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(walkDf, by=(c("community"))) %>% rename(walk_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(fastFoodDf, by=(c("community"))) %>% rename(fast_food_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(liquorDf, by=(c("community"))) %>% rename(liquor_raw_score="raw_score")
resourcesDf <- resourcesDf %>% left_join(drugsDf, by=(c("community"))) %>% rename(drugs_raw_score="raw_score")
# add the percentile columns
resourcesDf$food <- ifelse(resourcesDf$food_raw_score >= median(resourcesDf$food_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$bike <- ifelse(resourcesDf$bike_raw_score >= median(resourcesDf$bike_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$walk <- ifelse(resourcesDf$walk_raw_score >= median(resourcesDf$walk_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$fast_food <- ifelse(resourcesDf$fast_food_raw_score < median(resourcesDf$fast_food_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$liquor <- ifelse(resourcesDf$liquor_raw_score < median(resourcesDf$liquor_raw_score, na.rm=TRUE), 1, 0)
resourcesDf$drugs <- ifelse(resourcesDf$drugs_raw_score < median(resourcesDf$drugs_raw_score, na.rm=TRUE), 1, 0)
# calculate the feature variable resource_access_index
resourcesDf$resource_access_index <- 0 +
(resourcesDf$food == 1) +
(resourcesDf$bike == 1) +
(resourcesDf$walk == 1) +
(resourcesDf$fast_food == 1) +
(resourcesDf$liquor == 1) +
(resourcesDf$drugs == 1)
# add quartiles for violentcrime to vs2010 and remove the original violentcrime variable
resourcesDf <- resourcesDf %>% mutate(violentcrime_quartile = ntile(violentcrime, 4))
resourcesDfAll <- resourcesDf
resourcesDf <- select(
resourcesDf,
-community,
-violentcrime,
-id,
-food_raw_score,
-bike_raw_score,
-walk_raw_score,
-fast_food_raw_score,
-liquor_raw_score,
-drugs_raw_score)
# clean the data set and rename to vs2010
vs2010 <- resourcesDf
# show a summary of the table
skimrTab <- skimr::skim(vs2010)
skimrTab %>%
dplyr::select(-skim_type) %>%
tibble::rowid_to_column() %>%
flextable::flextable() %>%
autofit() %>%
fit_to_width(14)
# ---
# create the model
# ---
# create the fit
fitVc <- rpart(
vs2010$violentcrime_quartile ~ .,
data=vs2010,
method="class"
)
#visualization
rpart.plot::prp(
fitVc,
type=1,
extra=101,
box.palette="auto",
branch.lty=3,
varlen=0,
shadow.col="gray",
nn=TRUE,
fallen.leaves=TRUE
)
# rules for the tree
summary(fitVc)
# complexity table and plot
printcp(fitVc)
plotcp(fitVc)
# error matrix
fitVcErrorMatrix <- data.frame(cat=vs2010$violentcrime_quartile, predict(fitVc, type="class"))
fitVcErrorMatrixTable <- table(fitVcErrorMatrix)
fitVcErrorMatrixTable
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTable)/sum(fitVcErrorMatrixTable))
fitVc$overallFit
# ---
# revised fit by pruning the tree where cp=0.26667
# ---
# eliminate the owner variable
vs2010Revised <- select(vs2010, -owner)
# create the fit
fitVcRevised <- prune(fitVc, cp=0.26667)
# visualization
rpart.plot::prp(
fitVcRevised,
type=1,
extra=101,
box.palette="auto",
branch.lty=3,
varlen=0,
shadow.col="gray",
nn=TRUE,
fallen.leaves=TRUE
)
# error matrix
fitVcErrorMatrixRevised <- data.frame(cat=vs2010Revised$violentcrime_quartile, predict(fitVcRevised, type="class"))
fitVcErrorMatrixTableRevised <- table(fitVcErrorMatrixRevised)
fitVcErrorMatrixTableRevised
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTableRevised)/sum(fitVcErrorMatrixTableRevised))
fitVc$overallFit
# ---
# revised fit by eliminating the owner variable
# ---
# eliminate the owner variable
vs2010Revised <- select(vs2010, -owner)
# create the fit
fitVcRevised <- rpart(
vs2010Revised$violentcrime_quartile ~ .,
data=vs2010Revised,
method="class"
)
# visualization
rpart.plot::prp(
fitVcRevised,
type=1,
extra=101,
box.palette="auto",
branch.lty=3,
varlen=0,
shadow.col="gray",
nn=TRUE,
fallen.leaves=TRUE
)
# error matrix
fitVcErrorMatrixRevised <- data.frame(cat=vs2010Revised$violentcrime_quartile, predict(fitVcRevised, type="class"))
fitVcErrorMatrixTableRevised <- table(fitVcErrorMatrixRevised)
fitVcErrorMatrixTableRevised
# test for overall fit
fitVc$overallFit <- sum(diag(fitVcErrorMatrixTableRevised)/sum(fitVcErrorMatrixTableRevised))
fitVc$overallFit
# ---
# Test the model using the v15Df data
# ---
# create the data set
vs15Df <- import("VS15-No Parentheses-cleaned.csv")
names(vs15Df)[names(vs15Df) == "csa2010"] <- "community"
# add the extra columns from vs10Df
vs15Df <- vs15Df %>%
left_join (
select (
resourcesDfAll,
community,
all_of (
c("population", "food", "bike", "walk", "fast_food", "liquor", "drugs", "resource_access_index")
)
),
by = "community"
)
# calculate the quartiles for violentcrime
vs15Df <- vs15Df %>% mutate(violentcrime_quartile = ntile(violentcrime, 4))
# create the predictions
vs15Df$predictions <- predict(fitVc, newdata = vs15Df, type = "class")
# create the confusion Matrix
confusionMatrix <- table(vs15Df$violentcrime_quartile, vs15Df$predictions)
# calculate accuracy
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
print(paste("Accuracy:", accuracy))
